{
  "language": "Solidity",
  "sources": {
    "HyppurBroccoliNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/**\n * @title HyppurBroccoliNFT\n * @dev NFT contract for the Hyppur vs Broccoli game\n */\ncontract HyppurBroccoliNFT is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable, ReentrancyGuard {\n    using Counters for Counters.Counter;\n\n    // Token counters\n    Counters.Counter private _tokenIdCounter;\n    Counters.Counter private _hyppurCounter;\n    Counters.Counter private _broccoliCounter;\n\n    // Token type enum\n    enum TokenType { Hyppur, Broccoli }\n\n    // Token type mapping\n    mapping(uint256 => TokenType) public tokenTypes;\n    \n    // HWO token contract\n    IERC20 public hwoToken;\n    \n    // Base URI for metadata\n    string private _baseTokenURI;\n    \n    // Minting phases and costs\n    uint256 public constant PHASE0_MAX = 5000;\n    uint256 public constant PHASE1_MAX = 9000;\n    uint256 public constant PHASE2_MAX = 25000;\n    uint256 public constant PHASE3_MAX = 50000;\n    \n    uint256 public constant PHASE0_COST = 2000 * 10**18; // 2,000 HWO\n    uint256 public constant PHASE1_COST = 5000 * 10**18; // 5,000 HWO\n    uint256 public constant PHASE2_COST = 8000 * 10**18; // 8,000 HWO\n    uint256 public constant PHASE3_COST = 20000 * 10**18; // 20,000 HWO\n    \n    // Max NFTs per wallet\n    uint256 public maxNFTsPerWallet = 10;\n    \n    // Whitelist\n    mapping(address => bool) public whitelist;\n    bool public whitelistOnly = false;\n    \n    // Minting enabled\n    bool public mintingEnabled = true;\n    \n    // Events\n    event NFTMinted(address indexed to, uint256 tokenId, TokenType tokenType);\n    event WhitelistUpdated(address indexed user, bool status);\n    event WhitelistOnlyUpdated(bool status);\n    event BaseURIUpdated(string newBaseURI);\n    event MintingEnabledUpdated(bool status);\n    event MaxNFTsPerWalletUpdated(uint256 newMax);\n    event TokensWithdrawn(address indexed to, uint256 amount);\n    \n    /**\n     * @dev Constructor\n     * @param name Name of the NFT collection\n     * @param symbol Symbol of the NFT collection\n     * @param baseURI Base URI for token metadata\n     * @param hwoTokenAddress Address of the HWO token contract\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        string memory baseURI,\n        address hwoTokenAddress\n    ) ERC721(name, symbol) {\n        _baseTokenURI = baseURI;\n        hwoToken = IERC20(hwoTokenAddress);\n    }\n    \n    /**\n     * @dev Get the current minting cost based on total supply\n     */\n    function getCurrentMintCost() public view returns (uint256) {\n        uint256 totalSupply = totalSupply();\n        \n        if (totalSupply < PHASE0_MAX) {\n            return PHASE0_COST;\n        } else if (totalSupply < PHASE1_MAX) {\n            return PHASE1_COST;\n        } else if (totalSupply < PHASE2_MAX) {\n            return PHASE2_COST;\n        } else {\n            return PHASE3_COST;\n        }\n    }\n    \n    /**\n     * @dev Mint a new NFT\n     * @param tokenType Type of token to mint (0 for Hyppur, 1 for Broccoli)\n     */\n    function mint(TokenType tokenType) external nonReentrant {\n        require(mintingEnabled, \"Minting is disabled\");\n        require(!whitelistOnly || whitelist[msg.sender], \"Not whitelisted\");\n        require(balanceOf(msg.sender) < maxNFTsPerWallet, \"Max NFTs per wallet reached\");\n        \n        uint256 mintCost = getCurrentMintCost();\n        \n        // Transfer HWO tokens from user to contract\n        require(hwoToken.transferFrom(msg.sender, address(this), mintCost), \"Token transfer failed\");\n        \n        // Mint the NFT\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _safeMint(msg.sender, tokenId);\n        \n        // Set token type and increment counter\n        tokenTypes[tokenId] = tokenType;\n        if (tokenType == TokenType.Hyppur) {\n            _hyppurCounter.increment();\n        } else {\n            _broccoliCounter.increment();\n        }\n        \n        // Set token URI based on type\n        string memory tokenURIString = tokenType == TokenType.Hyppur ? \n            string(abi.encodePacked(_baseTokenURI, \"hyppur/\", _toString(tokenId))) : \n            string(abi.encodePacked(_baseTokenURI, \"broccoli/\", _toString(tokenId)));\n        _setTokenURI(tokenId, tokenURIString);\n        \n        emit NFTMinted(msg.sender, tokenId, tokenType);\n    }\n    \n    /**\n     * @dev Get counts of minted NFTs by type\n     */\n    function getTokenCounts() external view returns (uint256 totalTokens, uint256 hyppurCount, uint256 broccoliCount) {\n        return (totalSupply(), _hyppurCounter.current(), _broccoliCounter.current());\n    }\n    \n    /**\n     * @dev Add or remove an address from the whitelist\n     * @param user Address to update\n     * @param status Whitelist status\n     */\n    function updateWhitelist(address user, bool status) external onlyOwner {\n        whitelist[user] = status;\n        emit WhitelistUpdated(user, status);\n    }\n    \n    /**\n     * @dev Batch update whitelist\n     * @param users Addresses to update\n     * @param status Whitelist status\n     */\n    function batchUpdateWhitelist(address[] calldata users, bool status) external onlyOwner {\n        for (uint256 i = 0; i < users.length; i++) {\n            whitelist[users[i]] = status;\n            emit WhitelistUpdated(users[i], status);\n        }\n    }\n    \n    /**\n     * @dev Set whitelist only mode\n     * @param status Whitelist only status\n     */\n    function setWhitelistOnly(bool status) external onlyOwner {\n        whitelistOnly = status;\n        emit WhitelistOnlyUpdated(status);\n    }\n    \n    /**\n     * @dev Set base URI for token metadata\n     * @param newBaseURI New base URI\n     */\n    function setBaseURI(string memory newBaseURI) external onlyOwner {\n        _baseTokenURI = newBaseURI;\n        emit BaseURIUpdated(newBaseURI);\n    }\n    \n    /**\n     * @dev Enable or disable minting\n     * @param status Minting enabled status\n     */\n    function setMintingEnabled(bool status) external onlyOwner {\n        mintingEnabled = status;\n        emit MintingEnabledUpdated(status);\n    }\n    \n    /**\n     * @dev Set max NFTs per wallet\n     * @param newMax New max NFTs per wallet\n     */\n    function setMaxNFTsPerWallet(uint256 newMax) external onlyOwner {\n        maxNFTsPerWallet = newMax;\n        emit MaxNFTsPerWalletUpdated(newMax);\n    }\n    \n    /**\n     * @dev Withdraw HWO tokens from the contract\n     * @param to Address to send tokens to\n     * @param amount Amount of tokens to withdraw\n     */\n    function withdrawTokens(address to, uint256 amount) external onlyOwner {\n        require(hwoToken.transfer(to, amount), \"Token transfer failed\");\n        emit TokensWithdrawn(to, amount);\n    }\n    \n    /**\n     * @dev Withdraw all HWO tokens from the contract\n     * @param to Address to send tokens to\n     */\n    function withdrawAllTokens(address to) external onlyOwner {\n        uint256 balance = hwoToken.balanceOf(address(this));\n        require(hwoToken.transfer(to, balance), \"Token transfer failed\");\n        emit TokensWithdrawn(to, balance);\n    }\n    \n    /**\n     * @dev Owner mint function for giveaways, etc.\n     * @param to Address to mint to\n     * @param tokenType Type of token to mint\n     */\n    function ownerMint(address to, TokenType tokenType) external onlyOwner {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _safeMint(to, tokenId);\n        \n        // Set token type and increment counter\n        tokenTypes[tokenId] = tokenType;\n        if (tokenType == TokenType.Hyppur) {\n            _hyppurCounter.increment();\n        } else {\n            _broccoliCounter.increment();\n        }\n        \n        // Set token URI based on type\n        string memory tokenURIString = tokenType == TokenType.Hyppur ? \n            string(abi.encodePacked(_baseTokenURI, \"hyppur/\", _toString(tokenId))) : \n            string(abi.encodePacked(_baseTokenURI, \"broccoli/\", _toString(tokenId)));\n        _setTokenURI(tokenId, tokenURIString);\n        \n        emit NFTMinted(to, tokenId, tokenType);\n    }\n    \n    /**\n     * @dev Convert uint256 to string\n     * @param value Value to convert\n     */\n    function _toString(uint256 value) internal pure returns (string memory) {\n        // This is just a simple implementation for smaller numbers\n        if (value == 0) {\n            return \"0\";\n        }\n        \n        uint256 temp = value;\n        uint256 digits;\n        \n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        \n        bytes memory buffer = new bytes(digits);\n        \n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        \n        return string(buffer);\n    }\n    \n    // Override functions required by inherited contracts\n    \n    function _baseURI() internal view override returns (string memory) {\n        return _baseTokenURI;\n    }\n    \n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)\n        internal\n        override(ERC721, ERC721Enumerable)\n    {\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n    }\n    \n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\n        super._burn(tokenId);\n    }\n    \n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override(ERC721, ERC721URIStorage)\n        returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n    \n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC721Enumerable, ERC721URIStorage)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    /// @solidity memory-safe-assembly
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is
     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.
     * - When `from` is zero, the tokens will be minted for `to`.
     * - When `to` is zero, ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     * - `batchSize` is non-zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}

    /**
     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is
     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.
     * - When `from` is zero, the tokens were minted for `to`.
     * - When `to` is zero, ``from``'s tokens were burned.
     * - `from` and `to` are never both zero.
     * - `batchSize` is non-zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}

    /**
     * @dev Unsafe write access to the balances, used by extensions that "mint" tokens using an {ownerOf} override.
     *
     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant
     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such
     * that `ownerOf(tokenId)` is `a`.
     */
    // solhint-disable-next-line func-name-mixedcase
    function __unsafe_increaseBalance(address account, uint256 amount) internal {
        _balances[account] += amount;
    }
}